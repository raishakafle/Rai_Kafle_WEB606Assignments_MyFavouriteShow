{"ast":null,"code":"import { of } from 'rxjs';\nimport { contentArray } from '../helper-files/contentDb';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./messages.service\";\nclass ShowService {\n  constructor(messagesService) {\n    this.messagesService = messagesService;\n  }\n  getContentArray() {\n    this.messagesService.addMessage('Content array loaded!');\n    return of(contentArray);\n  }\n  getContentById(id) {\n    const contentItem = contentArray.find(item => item.id === id);\n    if (contentItem) {\n      this.messagesService.addMessage(`Content Item at id: ${id}`);\n    }\n    return of(contentItem);\n  }\n}\nShowService.ɵfac = function ShowService_Factory(t) {\n  return new (t || ShowService)(i0.ɵɵinject(i1.MessagesService));\n};\nShowService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShowService,\n  factory: ShowService.ɵfac,\n  providedIn: 'root'\n});\nexport { ShowService };","map":{"version":3,"names":["of","contentArray","ShowService","constructor","messagesService","getContentArray","addMessage","getContentById","id","contentItem","find","item","i0","ɵɵinject","i1","MessagesService","factory","ɵfac","providedIn"],"sources":["C:\\Users\\acer\\Documents\\GitHub\\Rai_Kafle_WEB606Assignments_MyFavouriteShow\\Rai_Kafle_WEB606Assignments_MyFavouriteShow\\src\\app\\services\\show.service.ts"],"sourcesContent":["// import { Injectable } from '@angular/core';\r\n\r\n// @Injectable({\r\n//   providedIn: 'root'\r\n// })\r\n// export class ShowService {\r\n\r\n//   constructor() { }\r\n// }\r\n\r\n\r\nimport { Injectable } from '@angular/core';\r\nimport { Observable, of } from 'rxjs';\r\nimport { Content } from '../helper-files/content-interface';\r\nimport { contentArray } from '../helper-files/contentDb';\r\nimport { MessagesService } from './messages.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class ShowService {\r\n  constructor(private messagesService: MessagesService) {}\r\n\r\n  getContentArray(): Observable<Content[]> {\r\n    this.messagesService.addMessage('Content array loaded!');\r\n    return of(contentArray);\r\n  }\r\n\r\n  getContentById(id: number): Observable<Content | undefined> {\r\n    const contentItem = contentArray.find(item => item.id === id);\r\n    if (contentItem) {\r\n      this.messagesService.addMessage(`Content Item at id: ${id}`);\r\n    }\r\n    return of(contentItem);\r\n  }\r\n}"],"mappings":"AAYA,SAAqBA,EAAE,QAAQ,MAAM;AAErC,SAASC,YAAY,QAAQ,2BAA2B;;;AAGxD,MAGaC,WAAW;EACtBC,YAAoBC,eAAgC;IAAhC,KAAAA,eAAe,GAAfA,eAAe;EAAoB;EAEvDC,eAAeA,CAAA;IACb,IAAI,CAACD,eAAe,CAACE,UAAU,CAAC,uBAAuB,CAAC;IACxD,OAAON,EAAE,CAACC,YAAY,CAAC;EACzB;EAEAM,cAAcA,CAACC,EAAU;IACvB,MAAMC,WAAW,GAAGR,YAAY,CAACS,IAAI,CAACC,IAAI,IAAIA,IAAI,CAACH,EAAE,KAAKA,EAAE,CAAC;IAC7D,IAAIC,WAAW,EAAE;MACf,IAAI,CAACL,eAAe,CAACE,UAAU,CAAC,uBAAuBE,EAAE,EAAE,CAAC;;IAE9D,OAAOR,EAAE,CAACS,WAAW,CAAC;EACxB;;AAdWP,WAAW,C;mBAAXA,WAAW,EAAAU,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,eAAA;AAAA;AAAXb,WAAW,C;SAAXA,WAAW;EAAAc,OAAA,EAAXd,WAAW,CAAAe,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPhB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}